function cov_225eu4esij(){var path="C:\\Users\\anjel\\Thinkful\\assessment-testing-basics\\src\\solution.js";var hash="435b39192e35a0d41d585b01c62916c355f12d02";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\anjel\\Thinkful\\assessment-testing-basics\\src\\solution.js",statementMap:{"0":{start:{line:6,column:20},end:{line:6,column:22}},"1":{start:{line:7,column:21},end:{line:7,column:23}},"2":{start:{line:8,column:20},end:{line:8,column:22}},"3":{start:{line:10,column:2},end:{line:12,column:3}},"4":{start:{line:10,column:15},end:{line:10,column:16}},"5":{start:{line:11,column:4},end:{line:11,column:98}},"6":{start:{line:14,column:2},end:{line:14,column:43}},"7":{start:{line:15,column:2},end:{line:15,column:21}},"8":{start:{line:18,column:0},end:{line:18,column:42}}},fnMap:{"0":{name:"partitionStudentsByScore",decl:{start:{line:5,column:9},end:{line:5,column:33}},loc:{start:{line:5,column:51},end:{line:16,column:1}},line:5}},branchMap:{"0":{loc:{start:{line:11,column:4},end:{line:11,column:97}},type:"cond-expr",locations:[{start:{line:11,column:35},end:{line:11,column:64}},{start:{line:11,column:67},end:{line:11,column:97}}],line:11}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"435b39192e35a0d41d585b01c62916c355f12d02"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_225eu4esij=function(){return actualCoverage;};}return actualCoverage;}cov_225eu4esij();/*
  Write a function that separates students into two buckets based on a given score. The end result for the "happy path" should be an array with two arrays inside of it.
*/function partitionStudentsByScore(students,score){cov_225eu4esij().f[0]++;let resultArray=(cov_225eu4esij().s[0]++,[]);let higherScores=(cov_225eu4esij().s[1]++,[]);let lowerScores=(cov_225eu4esij().s[2]++,[]);cov_225eu4esij().s[3]++;for(let i=(cov_225eu4esij().s[4]++,0);i<students.length;i++){cov_225eu4esij().s[5]++;students[i].score<=score?(cov_225eu4esij().b[0][0]++,lowerScores.push(students[i])):(cov_225eu4esij().b[0][1]++,higherScores.push(students[i]));}cov_225eu4esij().s[6]++;resultArray=[lowerScores,higherScores];cov_225eu4esij().s[7]++;return resultArray;}cov_225eu4esij().s[8]++;module.exports=partitionStudentsByScore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwYXJ0aXRpb25TdHVkZW50c0J5U2NvcmUiLCJzdHVkZW50cyIsInNjb3JlIiwicmVzdWx0QXJyYXkiLCJoaWdoZXJTY29yZXMiLCJsb3dlclNjb3JlcyIsImkiLCJsZW5ndGgiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInNvbHV0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gIFdyaXRlIGEgZnVuY3Rpb24gdGhhdCBzZXBhcmF0ZXMgc3R1ZGVudHMgaW50byB0d28gYnVja2V0cyBiYXNlZCBvbiBhIGdpdmVuIHNjb3JlLiBUaGUgZW5kIHJlc3VsdCBmb3IgdGhlIFwiaGFwcHkgcGF0aFwiIHNob3VsZCBiZSBhbiBhcnJheSB3aXRoIHR3byBhcnJheXMgaW5zaWRlIG9mIGl0LlxuKi9cblxuZnVuY3Rpb24gcGFydGl0aW9uU3R1ZGVudHNCeVNjb3JlKHN0dWRlbnRzLCBzY29yZSkge1xuICBsZXQgcmVzdWx0QXJyYXkgPSBbXVxuICBsZXQgaGlnaGVyU2NvcmVzID0gW11cbiAgbGV0IGxvd2VyU2NvcmVzID0gW11cblxuICBmb3IgKGxldCBpID0gMDsgaTxzdHVkZW50cy5sZW5ndGg7IGkrKykge1xuICAgIChzdHVkZW50c1tpXS5zY29yZSA8PSBzY29yZSkgPyBsb3dlclNjb3Jlcy5wdXNoKHN0dWRlbnRzW2ldKSA6IGhpZ2hlclNjb3Jlcy5wdXNoKHN0dWRlbnRzW2ldKTtcbiAgfVxuXG4gIHJlc3VsdEFycmF5ID0gW2xvd2VyU2NvcmVzLGhpZ2hlclNjb3Jlc107XG4gIHJldHVybiByZXN1bHRBcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXJ0aXRpb25TdHVkZW50c0J5U2NvcmU7XG4iXSwibWFwcGluZ3MiOiI2Z0RBZVk7MkZBZlo7QUFDQTtBQUNBLEVBRUEsUUFBU0EseUJBQVQsQ0FBa0NDLFFBQWxDLENBQTRDQyxLQUE1QyxDQUFtRCx5QkFDakQsR0FBSUMsWUFBVywwQkFBRyxFQUFILENBQWYsQ0FDQSxHQUFJQyxhQUFZLDBCQUFHLEVBQUgsQ0FBaEIsQ0FDQSxHQUFJQyxZQUFXLDBCQUFHLEVBQUgsQ0FBZixDQUhpRCx3QkFLakQsSUFBSyxHQUFJQyxFQUFDLDBCQUFHLENBQUgsQ0FBVixDQUFnQkEsQ0FBQyxDQUFDTCxRQUFRLENBQUNNLE1BQTNCLENBQW1DRCxDQUFDLEVBQXBDLENBQXdDLHlCQUNyQ0wsUUFBUSxDQUFDSyxDQUFELENBQVIsQ0FBWUosS0FBWixFQUFxQkEsS0FBdEIsNkJBQStCRyxXQUFXLENBQUNHLElBQVosQ0FBaUJQLFFBQVEsQ0FBQ0ssQ0FBRCxDQUF6QixDQUEvQiw4QkFBK0RGLFlBQVksQ0FBQ0ksSUFBYixDQUFrQlAsUUFBUSxDQUFDSyxDQUFELENBQTFCLENBQS9ELEVBQ0QsQ0FQZ0Qsd0JBU2pESCxXQUFXLENBQUcsQ0FBQ0UsV0FBRCxDQUFhRCxZQUFiLENBQWQsQ0FUaUQsd0JBVWpELE1BQU9ELFlBQVAsQ0FDRCxDLHdCQUVETSxNQUFNLENBQUNDLE9BQVAsQ0FBaUJWLHdCQUFqQiJ9